<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
    xmlns="http://www.springframework.org/schema/beans" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd" >
       
    <!-- 自动扫描该包 --> 
    <context:component-scan base-package="com.jt" />
    <!-- 启用mvc注解 -->
    <mvc:annotation-driven />
    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".html"></property>
    </bean>  
    <!-- 整合DRUID -->
    <util:properties id="cfg" location="classpath:config.properties"/>
    <!--配置DruidDataSource连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init" lazy-init="true">
		<property name="driverClassName" value="#{cfg.driver}" />
		<property name="url" value="#{cfg.url}" />
		<property name="username" value="#{cfg.username}" />
		<property name="password" value="#{cfg.password}" />
    </bean>
    <!-- 整合mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource" />
	   <property name="configLocation" value="classpath:mybatis-configs.xml"></property>
	   <!-- 自动扫描mapping.xml文件 -->
	   <property name="mapperLocations" >
			<list><value>classpath:mapper/*.xml</value></list>
	   </property>
	</bean>
    <!-- 扫描DAO接口所在包，Spring会自动查找其下的dao
                  接口，然后为接口创建代理对象-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
		          value="com.jt.**.dao"/>
	</bean>
	
	<!-- 整合shiro的配置 -->
	<!-- 配置realm -->
	<bean id="shiroUserRealm" 
           class="com.jt.sys.service.realm.ShiroUserRealm">
    	<!-- 配置凭证算法匹配器 -->
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"/>
    			<!-- <property name="hashIterations" value="1024"/> -->
    		</bean>
    	</property>
    </bean>
	
	<!-- 配置shiro安全管理器 -->
    <bean id="securityManager" 
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
       <property name="cacheManager" ref="cacheManager"/>
       <property name="realm" ref="shiroUserRealm"/>
       
    </bean>
    
    <!-- 配置shiroCache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>
    
	<!-- 配置Shiro过滤器 
	   这个bean的id值一定要与web.xml中过滤器
	   参数名targetBeanName的值相同
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
         <!-- shiro的核心安全接口 -->
         <property name="securityManager" ref="securityManager"/>
         <!-- 要求登录时的连接 -->
         <property name="loginUrl" value="/loginUI.do"/>
         <!-- 登录成功后要跳转的连接(此处已经在登录中处理了) -->
         <!-- <property name="successUrl" value="/index.jsp"></property> -->
         <!-- 访问未对其授权的资源时,要跳转的连接 
         <property name="unauthorizedUrl" value="/default.html"></property>-->
         <!-- shiro过滤约束配置 -->
         <property name="filterChainDefinitions">
             <value>
                 <!-- 对静态资源设置允许匿名访问 -->
                 /bower_components/** = anon
                 /build/** = anon
                 /dist/** = anon
                 /plugins/** = anon
                 /doLogin.do = anon
                 <!-- 退出 -->
                 /doLogout.do = logout  <!-- 会调用Subject的logout方法,此方法会将session清空 -->
                 <!-- 剩余其他路径，必须认证通过才可以访问 -->
                 /** = authc
             </value>
         </property>
     </bean>
	
	<!--Shiro生命周期处理器-->
	<bean id="lifecycleBeanPostProcessor" 
	      class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!--启用shiro注解权限检查-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	      depends-on="lifecycleBeanPostProcessor"/>
	<bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean> 
    <!-- 启动spring声明式事务管理 -->
    <!-- 定义事务管理对象 -->
    <bean id="txManager" 
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          <property name="dataSource" 
                    ref="dataSource"/>
    </bean>
    <!-- 基于xml方式配置声明式事务处理 -->
    <tx:advice id="txAdvice" 
               transaction-manager="txManager">
        <tx:attributes>
           <tx:method name="find*" read-only="true"/>
           <tx:method name="*" 
                      rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
      <aop:pointcut expression="execution(* com.jt.sys.service.impl.*.*(..))"
                   id="txPointCut"/>
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
    </aop:config>
    
</beans>












